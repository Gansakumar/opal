{"tagline":"A Framework for Optimization of Algorithms","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# OPAL&mdash;A Framework for Optimization of Algorithms\r\n\r\n## What is OPAL?\r\n\r\nOPAL is a Python modeling language for algorithmic optimization. Most\r\nalgorithms depend on parameters. Although changing the values of those\r\nparameters doesn't affect the correctness of the algorithm, it typically\r\naffects its performance, where *performance* is understood broadly. How can we\r\nbest choose those parameter values so as to maximize a certain measure of\r\nperformance?\r\n\r\nOPAL is a framework that allows to easily declare algorithms and the parameters\r\non which they depend along with representative test cases. It provides a\r\nconvenient syntax to formulate the optimization problem to be solved. A\r\nblack-box optimization solver takes care of the rest.\r\n\r\n## Requirements\r\n\r\n+ Python version 2.6 or 2.7 (not tested with 3.x)\r\n+ [NOMAD](http://www.gerad.ca/NOMAD)\r\n\r\n## Install\r\n\r\n+ Unzip the package or clone the git repository\r\n+ Go to the source directory\r\n+ Run `python setup.py install`\r\n\r\n## Testing\r\n\r\nTo run the following test, [Numpy](http://www.numpy.org) is required. Install\r\nit with `pip install numpy`.\r\n\r\nAssuming your `PYTHONPATH` is set correctly, you should be able to do:\r\n\r\n    cd examples/fd\r\n    python fd_optimize.py\r\n\r\n## References\r\n\r\n+ [Optimization of Algorithms with\r\n  OPAL](http://www.gerad.ca/~orban/_static/opalpaper.pdf)\r\n+ [Templating and Automatic Code Generation for Performance with Python](http://www.gerad.ca/~orban/_static/templating.pdf)\r\n+ [Taking Advantage of Parallelism in Algorithmic Parameter Optimization](http://dx.doi.org/10.1007/s11590-011-0428-6)\r\n+ [Algorithmic Parameter Optimization of the DFO Method with the OPAL Framework](http://dx.doi.org/10.1007/978-1-4419-6935-4_15)","name":"Opal"}